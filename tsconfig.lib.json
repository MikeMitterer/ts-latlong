// -------------------------------------------------------------------------------------------------
// Die .lib-Version exkludiert src/browser das dieses Dir nur zum Testen
// im browser benötigt wird
//
// Dieses File wird auch in packages#buidl.ts verwendet (zum Erstellen der Lib)
//
// Weitere Infos:
//    https://marcobotto.com/blog/compiling-and-bundling-typescript-libraries-with-webpack/
//    https://www.typescriptlang.org/docs/handbook/compiler-options.html
//
{
    "compileOnSave": true,
    "compilerOptions": {
        // "incremental": true - wird in tsconfig.json spezifiziert
        // Da sonst die lib nur teilweise generiert wird

        "strict": true,
        "target": "es2020",

        "outDir": "./lib",
      
        // Ist "rootDir" z.B. auf "./src" kommt bei Jest folgende Fehlermeldung:
        //     Unable to process '...UserFactory.specs.ts', please make sure that `outDir` in your tsconfig
        //     is neither `''` or `'.'`. You can also configure Jest config option
        //     `transformIgnorePatterns` to inform `ts-jest` to transform
        //
        // wird in packages.json beim "build" evtl. überschrieben (src/main)
        "rootDir": ".",

        // commonjs, amd oder es6 (esnext)
        // Beste Variante ist es6 (Vue esnext)
        // Mehr: http://www.geekabyte.io/2018/12/understanding-javascript-modules-as.html
        //
        // Rollup-Projekte überschreiben dieses Setting auf "esnext"!
        "module": "esnext",
        "moduleResolution": "node",

        "sourceMap": true,
        // "inlineSourceMap": true,

        // Essentiell damit die source-maps im Browser funktionieren
        "inlineSources": true,

        // Macht nur Probleme beim Testen...
        "noUnusedParameters": false,
        "noUnusedLocals": false,

        "noImplicitAny": true,
        "noImplicitThis": true,
        "noImplicitReturns": true,
        "noEmitOnError": true,
        "strictNullChecks": true,
        "preserveConstEnums": false,
        "removeComments": false,
        "experimentalDecorators": true,
        "emitDecoratorMetadata": true,

        // Muss auf true sein da sonst z.B. keine Images
        // oder JS-Libs ohne expliziten export importiert werden können
        // "allowSyntheticDefaultImports": true,

        "strictFunctionTypes": true,

        // Enables emit interoperability between CommonJS and ES Modules
        // via creation of namespace object for all imports.
        // Implies 'allowSyntheticDefaultImports'
        //
        // Import von Images funkt nicht mehr
        // "esModuleInterop": true,

        // Dient zum Importieren von json-Files
        // In der "include"-Section müssen auch die *.json-Files
        // eingebunden werden
        // (Sollte in tsconfig.json eingeschaltet werden (wenn notwendig)!)
        // "resolveJsonModule": true,

        "esModuleInterop": true,

        // wird mit tsc erstellt
        "declaration": true,

        // Hier landen die types - sonst kommen sie
        // ins outDir
        //
        //"declarationDir" :               "dist",

        "baseUrl": "./src",
        "paths": {
            // Pfade müssen auch in WebPack entsprechend definiert sein!
            // Funktioniert nicht richtig!
            //      https://github.com/Microsoft/TypeScript/issues/10866
            //
            // "@main/*": ["main/*"]
            // "@test/*":                     [ "test/ts/*"],
            // "@images/*":                   [ "site/images/*"]
        },

        // 'dom' muss drin bleiben da es sonst
        // Probleme bei compilieren mit "Puppeteer" gibt
        "lib": ["esnext", "dom"],
        // "lib": [ "dom"],

        // If types is specified, only packages listed will be included.
        //      Mehr: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#types-typeroots-and-types
        "types": [
            "node",
            "jest",
            "jest-extended"
        ]

        // Fallback, wenn nach d.ts Files gesucht wird
        // "typeRoots": [
        //     "./src/types",
        //     "node_modules/@types"
        // ]
    },
    // https://github.com/s-panferov/awesome-typescript-loader
    "awesomeTypescriptLoaderOptions": {
        "useCache": true,
        "forceIsolatedModules": true
        // "reportFiles": ["src/**/*.{ts,tsx}"]
    },
    "include": [
        "src/main/index.ts",
        "src/main/**/*.ts",

        // Damit funktioniert jest-extended + qunit
        // "src/types/*.ts"

        // Damit können images (mit ts-loader) importiert werden
        "src/site/images/typings.d.ts",

        // Muss auch in tsconfig.lib.json definiert sein!
        // Damit funktioniert z.B. 'const conf: MobiAdApp.Config' ohne import
        "src/types/*.d.ts"
    ],
    "exclude": ["lib", "node_modules", "dist" ]
}
